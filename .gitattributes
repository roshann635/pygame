import pygame
import random
import math
import sys

# Initialize Pygame
pygame.init()

# Constants
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
FPS = 60

# Colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
YELLOW = (255, 255, 0)
PURPLE = (128, 0, 128)

class Player:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.width = 50
        self.height = 40
        self.speed = 5
        self.health = 100
        self.max_health = 100
        
    def move(self, keys):
        if keys[pygame.K_LEFT] and self.x > 0:
            self.x -= self.speed
        if keys[pygame.K_RIGHT] and self.x < SCREEN_WIDTH - self.width:
            self.x += self.speed
        if keys[pygame.K_UP] and self.y > 0:
            self.y -= self.speed
        if keys[pygame.K_DOWN] and self.y < SCREEN_HEIGHT - self.height:
            self.y += self.speed
    
    def draw(self, screen):
        # Draw spaceship
        points = [
            (self.x + self.width // 2, self.y),
            (self.x, self.y + self.height),
            (self.x + self.width // 4, self.y + self.height - 10),
            (self.x + 3 * self.width // 4, self.y + self.height - 10),
            (self.x + self.width, self.y + self.height)
        ]
        pygame.draw.polygon(screen, BLUE, points)
        
        # Draw health bar
        bar_width = 50
        bar_height = 5
        bar_x = self.x + (self.width - bar_width) // 2
        bar_y = self.y - 10
        
        # Background of health bar
        pygame.draw.rect(screen, RED, (bar_x, bar_y, bar_width, bar_height))
        # Health portion
        health_width = int(bar_width * (self.health / self.max_health))
        pygame.draw.rect(screen, GREEN, (bar_x, bar_y, health_width, bar_height))

class Bullet:
    def __init__(self, x, y, direction=1):
        self.x = x
        self.y = y
        self.width = 4
        self.height = 10
        self.speed = 7
        self.direction = direction  # 1 for player bullets, -1 for enemy bullets
        
    def update(self):
        self.y -= self.speed * self.direction
    
    def draw(self, screen):
        color = YELLOW if self.direction == 1 else RED
        pygame.draw.rect(screen, color, (self.x, self.y, self.width, self.height))
    
    def is_off_screen(self):
        return self.y < 0 or self.y > SCREEN_HEIGHT

class Enemy:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.width = 40
        self.height = 30
        self.speed = random.uniform(1, 3)
        self.health = 30
        self.max_health = 30
        self.shoot_timer = 0
        self.shoot_delay = random.randint(60, 120)  # Frames between shots
        
    def update(self):
        self.y += self.speed
        self.shoot_timer += 1
        
    def draw(self, screen):
        # Draw enemy spaceship
        points = [
            (self.x + self.width // 2, self.y + self.height),
            (self.x, self.y),
            (self.x + self.width // 4, self.y + 10),
            (self.x + 3 * self.width // 4, self.y + 10),
            (self.x + self.width, self.y)
        ]
        pygame.draw.polygon(screen, RED, points)
        
        # Draw health bar
        bar_width = 30
        bar_height = 3
        bar_x = self.x + (self.width - bar_width) // 2
        bar_y = self.y - 8
        
        # Background of health bar
        pygame.draw.rect(screen, RED, (bar_x, bar_y, bar_width, bar_height))
        # Health portion
        health_width = int(bar_width * (self.health / self.max_health))
        pygame.draw.rect(screen, GREEN, (bar_x, bar_y, health_width, bar_height))
    
    def can_shoot(self):
        if self.shoot_timer >= self.shoot_delay:
            self.shoot_timer = 0
            self.shoot_delay = random.randint(60, 120)
            return True
        return False
    
    def is_off_screen(self):
        return self.y > SCREEN_HEIGHT

class Game:
    def __init__(self):
        self.screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
        pygame.display.set_caption("Space Shooter Game")
        self.clock = pygame.time.Clock()
        self.running = True
        self.score = 0
        self.level = 1
        self.enemy_spawn_timer = 0
        self.enemy_spawn_delay = 60  # Frames between enemy spawns
        
        # Game objects
        self.player = Player(SCREEN_WIDTH // 2 - 25, SCREEN_HEIGHT - 60)
        self.bullets = []
        self.enemy_bullets = []
        self.enemies = []
        self.explosions = []
        
        # Game state
        self.game_over = False
        self.paused = False
        
    def handle_events(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                self.running = False
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE and not self.game_over:
                    # Shoot bullet
                    bullet = Bullet(self.player.x + self.player.width // 2 - 2, self.player.y)
                    self.bullets.append(bullet)
                elif event.key == pygame.K_r and self.game_over:
                    # Restart game
                    self.__init__()
                elif event.key == pygame.K_p and not self.game_over:
                    # Pause/unpause
                    self.paused = not self.paused
    
    def update(self):
        if self.game_over or self.paused:
            return
            
        keys = pygame.key.get_pressed()
        self.player.move(keys)
        
        # Update bullets
        for bullet in self.bullets[:]:
            bullet.update()
            if bullet.is_off_screen():
                self.bullets.remove(bullet)
        
        for bullet in self.enemy_bullets[:]:
            bullet.update()
            if bullet.is_off_screen():
                self.enemy_bullets.remove(bullet)
        
        # Spawn enemies
        self.enemy_spawn_timer += 1
        if self.enemy_spawn_timer >= self.enemy_spawn_delay:
            enemy = Enemy(random.randint(0, SCREEN_WIDTH - 40), -30)
            self.enemies.append(enemy)
            self.enemy_spawn_timer = 0
            # Increase difficulty over time
            self.enemy_spawn_delay = max(20, 60 - self.level * 2)
        
        # Update enemies
        for enemy in self.enemies[:]:
            enemy.update()
            if enemy.is_off_screen():
                self.enemies.remove(enemy)
            elif enemy.can_shoot():
                bullet = Bullet(enemy.x + enemy.width // 2 - 2, enemy.y + enemy.height, -1)
                self.enemy_bullets.append(bullet)
        
        # Check collisions
        self.check_collisions()
        
        # Update level
        self.level = max(1, self.score // 100 + 1)
    
    def check_collisions(self):
        # Player bullets vs enemies
        for bullet in self.bullets[:]:
            for enemy in self.enemies[:]:
                if (bullet.x < enemy.x + enemy.width and
                    bullet.x + bullet.width > enemy.x and
                    bullet.y < enemy.y + enemy.height and
                    bullet.y + bullet.height > enemy.y):
                    
                    self.bullets.remove(bullet)
                    enemy.health -= 20
                    if enemy.health <= 0:
                        self.enemies.remove(enemy)
                        self.score += 10
                    break
        
        # Enemy bullets vs player
        for bullet in self.enemy_bullets[:]:
            if (bullet.x < self.player.x + self.player.width and
                bullet.x + bullet.width > self.player.x and
                bullet.y < self.player.y + self.player.height and
                bullet.y + bullet.height > self.player.y):
                
                self.enemy_bullets.remove(bullet)
                self.player.health -= 10
                if self.player.health <= 0:
                    self.game_over = True
        
        # Enemies vs player
        for enemy in self.enemies[:]:
            if (enemy.x < self.player.x + self.player.width and
                enemy.x + enemy.width > self.player.x and
                enemy.y < self.player.y + self.player.height and
                enemy.y + enemy.height > self.player.y):
                
                self.enemies.remove(enemy)
                self.player.health -= 20
                if self.player.health <= 0:
                    self.game_over = True
    
    def draw(self):
        self.screen.fill(BLACK)
        
        if not self.game_over:
            # Draw stars background
            for i in range(50):
                x = (i * 37) % SCREEN_WIDTH
                y = (i * 23) % SCREEN_HEIGHT
                pygame.draw.circle(self.screen, WHITE, (x, y), 1)
            
            # Draw game objects
            self.player.draw(self.screen)
            
            for bullet in self.bullets:
                bullet.draw(self.screen)
            
            for bullet in self.enemy_bullets:
                bullet.draw(self.screen)
            
            for enemy in self.enemies:
                enemy.draw(self.screen)
            
            # Draw UI
            font = pygame.font.Font(None, 36)
            score_text = font.render(f"Score: {self.score}", True, WHITE)
            level_text = font.render(f"Level: {self.level}", True, WHITE)
            self.screen.blit(score_text, (10, 10))
            self.screen.blit(level_text, (10, 50))
            
            if self.paused:
                pause_text = font.render("PAUSED - Press P to continue", True, YELLOW)
                text_rect = pause_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))
                self.screen.blit(pause_text, text_rect)
        else:
            # Game over screen
            font_large = pygame.font.Font(None, 72)
            font_medium = pygame.font.Font(None, 48)
            font_small = pygame.font.Font(None, 36)
            
            game_over_text = font_large.render("GAME OVER", True, RED)
            score_text = font_medium.render(f"Final Score: {self.score}", True, WHITE)
            restart_text = font_small.render("Press R to restart", True, YELLOW)
            
            game_over_rect = game_over_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 - 50))
            score_rect = score_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))
            restart_rect = restart_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 + 50))
            
            self.screen.blit(game_over_text, game_over_rect)
            self.screen.blit(score_text, score_rect)
            self.screen.blit(restart_text, restart_rect)
        
        pygame.display.flip()
    
    def run(self):
        while self.running:
            self.handle_events()
            self.update()
            self.draw()
            self.clock.tick(FPS)
        
        pygame.quit()
        sys.exit()

if __name__ == "__main__":
    print("Space Shooter Game")
    print("Controls:")
    print("- Arrow keys: Move spaceship")
    print("- Space: Shoot")
    print("- P: Pause/Unpause")
    print("- R: Restart (when game over)")
    print("\nStarting game...")
    
    game = Game()
    game.run()

